buildscript {
  repositories {
    jcenter()
  }

  dependencies {
    classpath "com.github.ben-manes:gradle-versions-plugin:0.12.0"
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = "2.11"
}

repositories {
  mavenLocal()
  mavenCentral()
}

apply plugin: "idea"
apply plugin: "java"
apply plugin: "com.github.ben-manes.versions"

dependencies {
  compile "org.jetbrains:annotations:15.0"
  compile "org.eclipse.jgit:org.eclipse.jgit:4.5.0.201609210915-r"
  compile "org.mapdb:mapdb:3.0.2"
  compile "org.slf4j:slf4j-simple:1.7.21"
  compile "org.jgrapht:jgrapht-core:1.0.0"
  compile "com.beust:jcommander:1.58"

  compile "ru.bozaro.gitlfs:gitlfs-pointer:0.11.0"
  compile "ru.bozaro.gitlfs:gitlfs-client:0.11.0"

  testCompile "com.google.jimfs:jimfs:1.1"
  testCompile "org.testng:testng:6.9.13.6"
}

sourceCompatibility = JavaVersion.VERSION_1_8

idea {
  project {
    jdkName = sourceCompatibility.name
    languageLevel = sourceCompatibility.name
  }
  module {
    jdkName = sourceCompatibility.name
    downloadJavadoc = true
    downloadSources = true
  }
}

tasks.withType(JavaCompile) {
  options.encoding = "UTF-8"
}

test {
  useTestNG()
  maxHeapSize = "384m"
  ignoreFailures = "$testIgnoreFailures".toBoolean()
}

jar {
  manifest {
    attributes(
        "Main-Class": "git.lfs.migrate.Main",
        "Class-Path": "${-> createLauncherClassPath()}"
    )
  }
}

task deployJars(dependsOn: jar) << {
  def projectArtifacts = configurations.archives.artifacts*.file
  def fullArtifacts = configurations.archives.artifacts*.file + configurations.runtime.files
  copy {
    from fullArtifacts.intersect(projectArtifacts)
    into "${project.buildDir}/deploy"
  }
  copy {
    from fullArtifacts.minus(projectArtifacts)
    into "${project.buildDir}/deploy/vendors"
  }
}

task deployZip(type: Zip, dependsOn: deployJars) {
  from "build/deploy"
}

def createLauncherClassPath() {
  def projectArtifacts = configurations.archives.artifacts*.file
  def fullArtifacts = configurations.archives.artifacts*.file + configurations.runtime.files
  def vendorJars = fullArtifacts.minus(projectArtifacts).collect { "vendors/${it.name}" }
  return vendorJars.join(" ")
}
